import boto3
import botocore
import json
import time
from constants.db_status_enum import DBStatus

class SNSManager:

    def __init__(self, region_name):
        self.sns_client = boto3.client('sns', region_name)
        
    def publish_message(self, message_hash, topic_arn):
        """
        this method publishes messages to SNS
        :param message_hash: actual message
        :param topic_arn: sns topic arn
        :param options_hash: hash code
        :return: HTTP status code of the request
        """
        message = json.dumps(message_hash)
        subject = self.get_subject(message)
        response = {}
        status_code = 200
        
        try:
            response = self.sns_client.publish(
                TopicArn=topic_arn,
                Message=message,
                Subject=subject,
                MessageStructure='String',
                MessageAttributes={
                        'message_type': {
                            'DataType': 'String',
                            'StringValue': message_hash['message_type']
                        }
                }
            )
            print("Publish message response: "+json.dumps(response))
            status_code = response['ResponseMetadata']['HTTPStatusCode']
        except botocore.exceptions.ClientError as e:
            print("Failed while publishing the data to SNS topic: "+ str(e))
            status_code = int(e.response['ResponseMetadata']['HTTPStatusCode'])

        return status_code 
        
    def get_subject(self, message):
        
        body = json.loads(message)
        subject = "auto-generated subject {}".format(round(time.time() * 1000))
        
        if 'algorithm' in body and 'status' in body:
            if body['status'] == DBStatus.failed:
                subject = "{} | Error subject autogenerated at {}".format(message['algorithm'],round(time.time() * 1000))
        
        return subject
