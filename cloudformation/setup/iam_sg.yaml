AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create roles
Parameters:
  Env:
    Type: String
    Description: 'environment (uppercase only), ex: DEV, QAS, PRD'
  AppEnv:
    Type: String
    Description: 'application environment (lowercase only), ex: dev, qas, prd'
  Org:
    Type: String
    Default: belc
    Description: 'organization (lowercase only), ex: belc (belcorp)'
  MyVpcId:
    Type: String
    Description: VPC Id where will be deploy the security group
Resources:
  LambdaExecutionRoleRes:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: IAM-MLO-LambdaExec-${Env}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - states.amazonaws.com
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName:
          Fn::Sub: MLO-LambdaExec-Policy-${Env}
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            - logs:getLogEvents
            - logs:filterLogEvents
            - logs:putMetricFilter
            - logs:putRetentionPolicy
            - logs:putSubscriptionFilter
            - logs:createExportTask
            - cloudwatch:getMetricData
            - events:DescribeRule
            - events:EnableRule
            - events:ListRules
            - events:PutEvents
            - events:PutPermission
            - events:PutRule
            Resource: "*"
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:ListTables
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            - dynamodb:GetItem
            - dynamodb:GetRecords
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DY-MLO-NotifProcessingLog-${Env}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DY-MLO-ProcessInfo-${Env}
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
            - Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:SQS-MLO-ProcessQueue-${Env}
            - Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:SQS-MLO-UpdateQueue-${Env}
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            Resource:
            - Fn::Sub: arn:aws:s3:::${Org}-bigdata-models-dlk-${AppEnv}
            - Fn::Sub: arn:aws:s3:::${Org}-bigdata-models-dlk-${AppEnv}/*
          - Effect: Allow
            Action: states:*
            Resource:
              Fn::Sub: arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:SF-MLO-${Env}
          - Effect: Allow
            Action:
            - sns:Publish
            - sns:GetTopicAttributes
            - sns:List*
            Resource:
              Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:SNS-MLO-Topic-${Env}
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:        
      GroupDescription: Allow Lambda work in VPC
      GroupName:
        Fn::Sub: SG-MLO-Lambda-${Env}
      VpcId:
        Ref: MyVpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
Outputs:
  LambdaExecutionRoleRes:
    Value:
      Fn::GetAtt:
      - LambdaExecutionRoleRes
      - Arn
